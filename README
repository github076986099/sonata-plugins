musicbrainz.py
================================

what this is
---------------------

a sonata plugin that interprets files' metadata about musicbrainz, queries the
musicbrainz server and displays information acquired (currently, only
hyperlinks).

by doing so, the plugin tries to explore the needs of plugins in sonata.

what this is not
---------------------

this plugin will be absolutely useless if the files are not musicbrainz tagged,
eg by musicbrainz picard. it will not try to guess which song this is in
musicbrainz, and does not support writing any tags. picard is more suited for
this job. (adding an option to launch picard on an unknown file is probably as
far as it will get on that issue.)

open issues
---------------------

no caching is done, resulting in hits on the mb servers on every track change
(this is even a security issue, enabling them to track what you hear, in
theory). will have to investigate if there is some cross-app way of doing so.

plugin_class.py
================================

as i prefer an object based approach to plugins over a couple of callbacks,
i've created this framework for sonata plugins. its main class, Plugin (a base
class for plugins) gives the child classes hook_foobar functions that can be
registered as capabilities and call the on_foobar functions. a particular
callback, hook_enablables, is special in that it manages the creation and
destruction of a single instance of the plugin class. care is taken not to let
that instance be referenced somewhere where the reference is not removed in
time, so the object can really be deleted when the plugin is switched off.

see class_based_demo.py for an example, or just look at musicbrainz.py.
